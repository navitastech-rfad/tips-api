buildscript {
    ext {
        libs = [
            spring: [
                boot: [
					'org.springframework.boot:spring-boot',
					'org.springframework.boot:spring-boot-autoconfigure',
					'org.springframework.boot:spring-boot-starter-web',
					'org.springframework.boot:spring-boot-starter-data-jpa',
					'org.springframework.boot:spring-boot-starter-actuator'
                ],
                framework: [                    
                    'org.springframework:spring-context',                    
                    'org.springframework:spring-core',
					'org.springframework:spring-jdbc',
					'org.springframework:spring-orm',
					'org.springframework:spring-tx',
					'org.springframework:spring-web',
					'org.springframework:spring-webmvc',
					'org.springframework:spring-aspects',
                    'org.springframework:spring-beans',
					'org.springframework.security:spring-security-core',
                    'org.springframework.security:spring-security-web', 
					'org.springframework.security:spring-security-config',
                    'org.springframework.data:spring-data-commons',
					'org.springframework.data:spring-data-jpa',
					'org.springframework.security:spring-security-jwt:1.0.9.RELEASE' 
				]               
            ],

            db: [
                'org.postgresql:postgresql',
                'org.liquibase:liquibase-core',
				'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
            ],
			
			security: [
				'org.keycloak:keycloak-spring-boot-starter:4.2.1.Final',
				'org.keycloak:keycloak-core:4.2.1.Final',
				'org.keycloak:keycloak-spring-boot-adapter-core:4.2.1.Final',
				'org.keycloak:keycloak-spring-security-adapter:4.2.1.Final'
			],
			
			logging: [
				'org.slf4j:slf4j-api',
				'org.slf4j:jcl-over-slf4j',
				'org.slf4j:jul-to-slf4j',
				'org.apache.logging.log4j:log4j-slf4j-impl',
				'org.apache.logging.log4j:log4j-core',
				'org.apache.logging.log4j:log4j-jul'
			],
            
            test: [
				'org.mockito:mockito-core',
				'junit:junit',
				'org.springframework:spring-test',
				'org.springframework.boot:spring-boot-test'
            ],            

            misc: [
                'io.jsonwebtoken:jjwt:0.9.1',
                'javax.inject:javax.inject:1',
                'commons-io:commons-io:2.5',
                'commons-collections:commons-collections:3.2.2'        
            ]
        ]
    }

  
  	dependencies {
		classpath "com.netflix.nebula:gradle-lint-plugin:latest.release"
         
	}
    
}
	 

plugins {
    id 'org.springframework.boot' version '2.0.3.RELEASE'
    id 'org.sonarqube' version '2.6.2'
    id 'io.spring.dependency-management'  version '1.0.6.RELEASE'
    id 'eclipse'
    id 'jacoco'
    id 'java'
    id 'checkstyle'
    id 'pmd'    
    id 'findbugs'
    id 'org.owasp.dependencycheck' version '3.3.0'
    
}

apply plugin: 'nebula.lint'

dependencyManagement {
    imports {
        mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
}

group = 'com.navitas'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8


gradleLint {
  rules  = ['dependency-parentheses']
  criticalRules = ['unused-dependency'] // <-- this will fail the build in the event of a violation
}

gradleLint.reportFormat = 'html'
 
  springBoot {
	 buildInfo()

 }

repositories {
    mavenLocal()
	mavenCentral()
}

configurations {
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

dependencies {
    compile libs.spring.boot
	compile libs.spring.framework
	compile libs.security
    compile libs.db
	compile libs.logging
    compile libs.misc
    
    testCompile libs.test
}

jacoco {
    toolVersion = "0.8.1"
//    reportsDir = file("$buildDir/reports")
}

jacocoTestCoverageVerification {
    violationRules {
        rule { limit { minimum = 0.50 } }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

//    dependsOn jacocoTestCoverageVerification

    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(files(sourceSets.main.output).collect {
        fileTree(dir: it)
    })
}

//test {
//    jacoco {
//        append = false
//        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
//        classDumpDir = file("$buildDir/jacoco/classpathdumps")
//    }
//}

tasks.withType(Test) {
    finalizedBy jacocoTestReport

    reports {
        html.destination =file("${reporting.baseDir}/${name}")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}



findbugs{
    ignoreFailures=true
    findbugsTest.enabled=false
	toolVersion = "3.0.1"
    sourceSets=[sourceSets.main]
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

 
tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
    }
}


 pmd {
   ignoreFailures = true
    pmdTest.enabled=false
	sourceSets=[sourceSets.main]
    reportsDir = file("$project.buildDir/reports/pmd")
}

pmdMain {
    source ='src/main/java'
}

pmdTest {
    source ='src/test/java'
}


tasks.withType(Pmd){
     reports {
        xml.enabled false
        html.enabled true
        
    }
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/checkstyle")
}

checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}



tasks.withType(Checkstyle){
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
}
